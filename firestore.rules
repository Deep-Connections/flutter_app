rules_version = '2';

service cloud.firestore {

    match /databases/{database}/documents {

        match /profiles/{userId} {
            allow create, update: if isOwn(userId) && correctlyUpdatesCoins();
            allow get: if request.auth != null;
        }
        match /chats/{chatId} {
            allow read: if isParticipant(resource.data);

            allow update: if isParticipant(resource.data) && isValidChatUpdate(request.resource.data, resource.data);

            match /messages/{messageId} {
                allow create: if validateCreateMessage(get(/databases/$(database)/documents/chats/$(chatId)).data, chatId);
                allow read: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data);
            }
        }
        match /{path=**}/messages/{messageId} {
    		allow read: if request.auth.uid in resource.data.participantIds;
        }

    }
}

function isOwn(userId) {
    return request.auth != null && request.auth.uid == userId;
}

function isPresent(field) {
    return resource != null && field in resource.data;
}

function isUnchanged(field) {
    return !(field in request.resource.data) || field in request.resource.data.diff(resource.data).unchangedKeys();
}

function coinsAreIncreasedByOne() {
    return request.resource.data.coins == resource.data.get("coins", 0) + 1;
}

function lastCollectedValid() {
    // should be now and 24 younger than previous lastCollected
    return request.resource.data.lastCollected == request.time && (!isPresent("lastCollected")
    || resource.data.lastCollected <= request.resource.data.lastCollected - duration.value(1, "d"));
}

function correctlyUpdatesCoins() {
    return isUnchanged("coins") || (coinsAreIncreasedByOne() && lastCollectedValid());
}

function isParticipant(object) {
    return request.auth != null && request.auth.uid in object.participantIds;
}

function isValidChatUpdate(chat, oldChat) {
    return chat.diff(oldChat).affectedKeys().hasOnly(["chatInfos"]) &&  
    ((!("chatInfos" in oldChat) && chat.chatInfos.keys().hasOnly([request.auth.uid]))
     || chat.chatInfos.diff(oldChat.chatInfos).affectedKeys().hasOnly([request.auth.uid])
    ) && chat.chatInfos[request.auth.uid].lastRead is timestamp;
}

function validateCreateMessage(chat, chatId){
    return isParticipant(chat) && isValidMessage(request.resource.data, request.auth.uid, chat, chatId);
}

function isValidMessage(message, senderId, chat, chatId) {
    return message.keys().hasAll(["senderId", "text", "chatId", "createdAt", "lastUpdatedAt", "participantIds", "runtimeType"]) && 
        message.size() == 7 &&
        message.senderId == senderId &&
        message.chatId == chatId &&
        message.text is string &&
        message.createdAt is timestamp &&
        message.lastUpdatedAt is timestamp &&
        message.createdAt <= request.time &&
        message.lastUpdatedAt <= request.time &&
        message.createdAt >= request.time - duration.value(7, "d") &&
        message.lastUpdatedAt >= message.createdAt &&
        message.participantIds is list &&
        message.participantIds.hasOnly(chat.get("originalParticipantIds", chat.participantIds)) &&
        chat.participantIds.size() >= 2 &&
        senderId in message.participantIds &&
        message.runtimeType == "default";
}
