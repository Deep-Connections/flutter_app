rules_version = '2';

service cloud.firestore {

    match /databases/{database}/documents {
        match /profiles/{userId} {
            allow create, update: if isOwn(userId) && correctlyUpdatesCoins();
            allow get: if request.auth != null;
        }
        match /chats/{chatId} {
            allow read: if isParticipant(request.auth, resource.data);

            allow update: if isParticipant(request.auth, resource.data)
            && isValidChat(request.resource.data, resource.data, request.auth.uid);

            match /messages/{messageId} {
                allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
            }
        }

    }
}

function isOwn(userId) {
    return request.auth != null && request.auth.uid == userId;
}

function isPresent(field) {
    return resource != null && field in resource.data;
}

function isInRequest(field) {
    return field in request.resource.data;
}

function isUnchanged(field) {
    return !isInRequest(field) || (isPresent(field) && request.resource.data[field] == resource.data[field]);
}

function coinsAreIncreasedByOne() {
    return (request.resource.data.coins == 1 && !isPresent("coins")) || request.resource.data.coins == resource.data.coins + 1;
}

function lastCollectedValid() {
    // should be now and 24 younger than previous lastCollected
    return request.resource.data.lastCollected == request.time && (!isPresent("lastCollected")
    || resource.data.lastCollected <= request.resource.data.lastCollected - duration.value(1, "d"));
}

function correctlyUpdatesCoins() {
    return isUnchanged("coins") || (coinsAreIncreasedByOne() && lastCollectedValid());
}

function isParticipant(auth, chat) {
    return auth != null && auth.uid in chat.participantIds;
}

function isValidChat(chat, oldChat, senderId) {
    return chat.participantIds is list
        && chat.timestamp is timestamp
        && chat.timestamp >= oldChat.timestamp - duration.value(1, 'm')
        && isValidMessage(chat.lastMessage, senderId)
        && isValidChatInfo(chat.chatInfo, oldChat.chatInfo, senderId, chat.participantIds);
}

function isValidMessage(message, senderId) {
    return message.senderId == senderId
        && message.text is string
        && message.chatId is string
        && message.timestamp is timestamp;
}

function isValidChatInfo(newChatInfo, oldChatInfo, senderId, participantIds) {
    return newChatInfo[senderId].unreadMessages == 0;
}
