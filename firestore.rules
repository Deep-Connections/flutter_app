rules_version = '2';

service cloud.firestore {

    match /databases/{database}/documents {

        match /{path=**}/messages/{messageId} {
    		allow read: if request.auth.uid in resource.data.participantIds;
        }
        match /profiles/{userId} {
            allow create, update: if isOwn(userId) && correctlyUpdatesCoins();
            allow get: if request.auth != null;
        }
        match /chats/{chatId} {
            allow read: if isParticipant(request.auth, resource.data);

            allow update: if isParticipant(request.auth, resource.data) && isValidChatUpdate(request.resource.data, resource.data);

            match /messages/{messageId} {
                //let chat = get(/databases/$(database)/documents/chats/$(chatId)).data;
                allow create: if isParticipant(request.auth, chat) && isValidMessage(request.resource.data, request.auth.uid);
            }
        }

    }
}

function isOwn(userId) {
    return request.auth != null && request.auth.uid == userId;
}

function isPresent(field) {
    return resource != null && field in resource.data;
}

function isInRequest(field) {
    return field in request.resource.data;
}

function isUnchanged(field) {
    return !(field in request.resource.data) || !(field in request.resource.data.diff(resource.data).affectedKeys());
}

function coinsAreIncreasedByOne() {
    return request.resource.data.coins == resource.data.get("coins", 0) + 1;
}

function lastCollectedValid() {
    // should be now and 24 younger than previous lastCollected
    return request.resource.data.lastCollected == request.time && (!isPresent("lastCollected")
    || resource.data.lastCollected <= request.resource.data.lastCollected - duration.value(1, "d"));
}

function correctlyUpdatesCoins() {
    return isUnchanged("coins") || (coinsAreIncreasedByOne() && lastCollectedValid());
}

function isParticipant(auth, object) {
    return auth != null && auth.uid in object.participantIds;
}

function isValidChatUpdate(chat, oldChat) {
    return chat.diff(oldChat).affectedKeys().hasOnly(["chatInfos"]) &&  
    ((!("chatInfos" in oldChat) && chat.chatInfos.keys().hasOnly([request.auth.uid]))
     || chat.chatInfos.diff(oldChat.chatInfos).affectedKeys().hasOnly([request.auth.uid])
    ) && chat.chatInfos[request.auth.uid].lastRead is timestamp;
}

function isValidMessage(message, senderId, chatId) {
    return message.keys().hasOnly(["senderId", "text", "chatId", "createdAt", "participantIds"]) &&
         message.senderId == senderId
        && message.text is string
        && message.chatId is string
        && message.createdAt is timestamp
        && participantIds is list;
}
