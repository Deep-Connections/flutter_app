rules_version = '2';

service cloud.firestore {

    match /databases/{database}/documents {
        match /profiles/{userId} {
            allow write: if request.auth != null && request.auth.uid == userId;
            allow get: if request.auth != null;
        }
        match /chats/{chatId} {
            allow read: if isParticipant(request.auth, resource.data);

            allow update: if isParticipant(request.auth, resource.data)
            && isValidChat(request.resource.data, resource.data, request.auth.uid);

            match /messages/{messageId} {
                allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
            }
        }

    }
}


function isParticipant(auth, chat) {
    return auth != null && auth.uid in chat.participantIds;
}

function isValidChat(chat, oldChat, senderId) {
    return chat.participantIds is list
        && chat.timestamp is timestamp
        && chat.timestamp.toMillis() >= oldChat.timestamp.toMillis() - 60000 // If the write is delayed by more than 60 seconds, reject it.
        && (isValidMessage(chat.lastMessage, senderId))
        && isValidChatInfos(chat.chatInfos);
}


function isValidMessage(message, senderId) {
    return message.senderId == senderId
        && message.text is string
        && message.chatId is string
        && message.timestamp is timestamp;
}

function isValidChatInfos(chatInfos) {
    for (var key in chatInfos.keys()) {
        var info = chatInfos[key];
        if (!(info.unreadMessages is int)) {
            return false;
        }
    }
    return true;
}